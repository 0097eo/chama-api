// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum MembershipRole {
  ADMIN
  TREASURER
  SECRETARY
  MEMBER
}

enum ContributionStatus {
  PENDING
  PAID
  OVERDUE
}

enum LoanStatus {
  PENDING
  APPROVED
  REJECTED
  ACTIVE
  PAID
  DEFAULTED
}

enum TransactionType {
  CONTRIBUTION
  LOAN_DISBURSEMENT
  LOAN_REPAYMENT
  EXPENSE
  OTHER
}

enum NotificationType {
  MEETING_REMINDER
  CONTRIBUTION_DUE
  LOAN_APPROVED
  GENERAL
}

enum AuditAction {
  USER_UPDATE
  USER_DELETE
  USER_INVITE

  CHAMA_UPDATE
  CHAMA_DELETE
  CHAMA_MEMBER_ADD
  CHAMA_MEMBER_REMOVE
  CHAMA_MEMBER_ROLE_UPDATE
}

enum MeetingStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}



// User model for authentication and personal details
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  phone     String   @unique
  firstName String
  lastName  String
  password  String // Will be a hashed password
  idNumber  String   @unique
  role      UserRole @default(USER)

  deletedAt DateTime?

  memberships  Membership[]
  notifications Notification[]
  uploadedFiles File[]

  auditLogs     AuditLog[]     @relation("UserActions") // User who performed the action
  auditTargets  AuditLog[]     @relation("TargetUser")  // User who was the target of the action

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Chama model for group details
model Chama {
  id                 String   @id @default(cuid())
  name               String   @unique
  description        String?
  registrationNumber String?  @unique
  totalMembers       Int      @default(1)
  monthlyContribution Float
  meetingDay         String // e.g., "Last Sunday of the month"
  constitutionUrl    String?

  members     Membership[]
  meetings    Meeting[]
  transactions Transaction[]
  invitations ChamaInvitation[]
  auditLogs AuditLog[]
  files       File[] 

  createdAt DateTime @default(now())
}

// Membership model linking Users and Chamas
model Membership {
  id      String         @id @default(cuid())
  role    MembershipRole @default(MEMBER)
  joinedAt DateTime       @default(now())
  isActive Boolean        @default(true)

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  chama  Chama  @relation(fields: [chamaId], references: [id], onDelete: Cascade)
  chamaId String

  contributions     Contribution[]
  loans             Loan[]
  meetingAttendance MeetingAttendance[]
  sentInvitations ChamaInvitation[]

  // A user can only be a member of a specific chama once
  @@unique([userId, chamaId])
  @@index([userId])
  @@index([chamaId])
}

// Contribution model for member payments
model Contribution {
  id         String             @id @default(cuid())
  amount     Float
  penaltyApplied Float?        @default(0.0) // To store penalty amount for late payment
  month      Int // e.g., 7 for July
  year       Int // e.g., 2025
  paymentMethod String         @default("MPESA")
  mpesaCode  String?            @unique
  mpesaCheckoutId String?
  paidAt     DateTime?
  status     ContributionStatus @default(PENDING)

  // Relation
  membership   Membership @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  membershipId String

  @@index([membershipId])
}

// Loan model for members borrowing funds
model Loan {
  id          String     @id @default(cuid())
  amount      Float
  interestRate Float
  duration    Int // Duration in months
  purpose     String
  status      LoanStatus @default(PENDING)
  appliedAt   DateTime   @default(now())
  disbursedAt DateTime? 
  approvedAt  DateTime?
  dueDate     DateTime?
  repaymentAmount   Float? // Total amount to be paid back (principal + interest)
  monthlyInstallment Float? // The calculated monthly payment amount
  isRestructured    Boolean  @default(false)
  restructureNotes  String?
  mpesaB2CRequestId String? @unique

  // Relation
  membership   Membership @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  membershipId String
  payments     LoanPayment[]

  @@index([membershipId])
}

// LoanPayment model for tracking loan repayments
model LoanPayment {
  id        String   @id @default(cuid())
  amount    Float
  paidAt    DateTime @default(now())
  paymentMethod String
  mpesaCode String?  @unique

  // Relation
  loan   Loan   @relation(fields: [loanId], references: [id], onDelete: Cascade)
  loanId String

  @@index([loanId])
}

// Meeting model for scheduling group meetings
model Meeting {
  id          String   @id @default(cuid())
  title       String
  agenda      String
  scheduledFor DateTime
  location    String
  status      MeetingStatus @default(SCHEDULED)
  minutes     String?

  // Relation
  chama   Chama  @relation(fields: [chamaId], references: [id], onDelete: Cascade)
  chamaId String
  attendance MeetingAttendance[]

  @@index([chamaId])
}

// MeetingAttendance to track who attended which meeting
model MeetingAttendance {
  id         String   @id @default(cuid())
  attendedAt DateTime @default(now())

  // Relations
  meeting      Meeting    @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  meetingId    String
  membership   Membership @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  membershipId String

  // A member can only be marked as attended once per meeting
  @@unique([meetingId, membershipId])
  @@index([meetingId])
  @@index([membershipId])
}

// Transaction model for general financial activities of the chama
model Transaction {
  id          String          @id @default(cuid())
  type        TransactionType
  amount      Float
  description String
  createdAt   DateTime        @default(now())

  // Relation
  chama   Chama  @relation(fields: [chamaId], references: [id], onDelete: Cascade)
  chamaId String

  @@index([chamaId])
}

// Notification model for user alerts
model Notification {
  id      String           @id @default(cuid())
  title   String
  message String
  type    NotificationType
  read    Boolean          @default(false)
  createdAt DateTime       @default(now())

  // Relation
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([userId])
}

// AuditLog model
model AuditLog {
  id        String      @id @default(cuid())
  action    AuditAction
  oldValue  Json?       // What the data looked like before
  newValue  Json?       // What the data looks like now

  // Relation to the user who performed the action (the admin)
  user      User     @relation("UserActions", fields: [userId], references: [id])
  userId    String

  // Relation to the user who was affected
  target    User    @relation("TargetUser", fields: [targetId], references: [id])
  targetId  String
  
  chama     Chama?   @relation(fields: [chamaId], references: [id], onDelete: Cascade)
  chamaId   String?  

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([targetId])
  @@index([chamaId]) 
}

// Model for chama invitation
model ChamaInvitation {
  id        String   @id @default(cuid())
  code      String   @unique @default(cuid())
  expiresAt DateTime

  // Relation to the Chama
  chama   Chama  @relation(fields: [chamaId], references: [id], onDelete: Cascade)
  chamaId String

  // Who is being invited
  email   String
  phone   String?

  // Who sent the invitation
  inviter   Membership @relation(fields: [inviterId], references: [id])
  inviterId String

  createdAt DateTime @default(now())

  @@index([chamaId])
  @@index([email])
}

// To store metadata for uploaded files
model File {
  id        String   @id @default(cuid())
  filename  String   // Original name of the file
  url       String   // The secure URL from Cloudinary
  publicId  String   @unique // The unique ID for the file on Cloudinary (for deletion)
  fileType  String   // e.g., 'application/pdf', 'image/jpeg'
  size      Int      // Size in bytes
  category  String   @default("document") // e.g., 'receipt', 'constitution', 'member_id'

  uploadedAt DateTime @default(now())

  // Relation to the Chama
  chama     Chama  @relation(fields: [chamaId], references: [id], onDelete: Cascade)
  chamaId   String

  // Relation to the user who uploaded the file
  uploader   User?   @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  uploaderId String?

  @@index([chamaId])
  @@index([uploaderId])
}