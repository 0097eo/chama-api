generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  phone         String         @unique
  firstName     String
  lastName      String
  password      String
  idNumber      String         @unique
  role          UserRole       @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  auditTargets  AuditLog[]     @relation("TargetUser")
  auditLogs     AuditLog[]     @relation("UserActions")
  uploadedFiles File[]
  memberships   Membership[]
  notifications Notification[]
}

model Chama {
  id                  String            @id @default(cuid())
  name                String            @unique
  description         String?
  registrationNumber  String?           @unique
  totalMembers        Int               @default(1)
  monthlyContribution Float
  meetingDay          String
  constitutionUrl     String?
  createdAt           DateTime          @default(now())
  auditLogs           AuditLog[]
  invitations         ChamaInvitation[]
  files               File[]
  meetings            Meeting[]
  members             Membership[]
  transactions        Transaction[]
}

model Membership {
  id                String              @id @default(cuid())
  role              MembershipRole      @default(MEMBER)
  joinedAt          DateTime            @default(now())
  isActive          Boolean             @default(true)
  userId            String
  chamaId           String
  sentInvitations   ChamaInvitation[]
  contributions     Contribution[]
  loans             Loan[]
  meetingAttendance MeetingAttendance[]
  chama             Chama               @relation(fields: [chamaId], references: [id], onDelete: Cascade)
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, chamaId])
  @@index([userId])
  @@index([chamaId])
}

model Contribution {
  id              String             @id @default(cuid())
  amount          Float
  month           Int
  year            Int
  paymentMethod   String             @default("MPESA")
  mpesaCode       String?            @unique
  paidAt          DateTime?
  status          ContributionStatus @default(PENDING)
  membershipId    String
  penaltyApplied  Float?             @default(0.0)
  mpesaCheckoutId String?
  membership      Membership         @relation(fields: [membershipId], references: [id], onDelete: Cascade)

  @@index([membershipId])
}

model Loan {
  id                 String        @id @default(cuid())
  amount             Float
  interestRate       Float
  duration           Int
  purpose            String
  status             LoanStatus    @default(PENDING)
  appliedAt          DateTime      @default(now())
  approvedAt         DateTime?
  dueDate            DateTime?
  membershipId       String
  disbursedAt        DateTime?
  isRestructured     Boolean       @default(false)
  monthlyInstallment Float?
  repaymentAmount    Float?
  restructureNotes   String?
  mpesaB2CRequestId  String?       @unique
  membership         Membership    @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  payments           LoanPayment[]

  @@index([membershipId])
}

model LoanPayment {
  id            String   @id @default(cuid())
  amount        Float
  paidAt        DateTime @default(now())
  mpesaCode     String?  @unique
  loanId        String
  paymentMethod String
  loan          Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)

  @@index([loanId])
}

model Meeting {
  id           String              @id @default(cuid())
  title        String
  agenda       String
  scheduledFor DateTime
  location     String
  chamaId      String
  minutes      String?
  status       MeetingStatus       @default(SCHEDULED)
  chama        Chama               @relation(fields: [chamaId], references: [id], onDelete: Cascade)
  attendance   MeetingAttendance[]

  @@index([chamaId])
}

model MeetingAttendance {
  id           String     @id @default(cuid())
  attendedAt   DateTime   @default(now())
  meetingId    String
  membershipId String
  meeting      Meeting    @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  membership   Membership @relation(fields: [membershipId], references: [id], onDelete: Cascade)

  @@unique([meetingId, membershipId])
  @@index([meetingId])
  @@index([membershipId])
}

model Transaction {
  id          String          @id @default(cuid())
  type        TransactionType
  amount      Float
  description String
  createdAt   DateTime        @default(now())
  chamaId     String
  chama       Chama           @relation(fields: [chamaId], references: [id], onDelete: Cascade)

  @@index([chamaId])
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AuditLog {
  id        String      @id @default(cuid())
  action    AuditAction
  oldValue  Json?
  newValue  Json?
  userId    String
  targetId  String
  createdAt DateTime    @default(now())
  chamaId   String?
  chama     Chama?      @relation(fields: [chamaId], references: [id], onDelete: Cascade)
  target    User        @relation("TargetUser", fields: [targetId], references: [id])
  user      User        @relation("UserActions", fields: [userId], references: [id])

  @@index([userId])
  @@index([targetId])
  @@index([chamaId])
}

model ChamaInvitation {
  id        String     @id @default(cuid())
  code      String     @unique @default(cuid())
  expiresAt DateTime
  chamaId   String
  email     String
  phone     String?
  inviterId String
  createdAt DateTime   @default(now())
  chama     Chama      @relation(fields: [chamaId], references: [id], onDelete: Cascade)
  inviter   Membership @relation(fields: [inviterId], references: [id])

  @@index([chamaId])
  @@index([email])
}

model File {
  id         String   @id @default(cuid())
  filename   String
  url        String
  publicId   String   @unique
  fileType   String
  size       Int
  category   String   @default("document")
  uploadedAt DateTime @default(now())
  chamaId    String
  uploaderId String?
  chama      Chama    @relation(fields: [chamaId], references: [id], onDelete: Cascade)
  uploader   User?    @relation(fields: [uploaderId], references: [id])

  @@index([chamaId])
  @@index([uploaderId])
}

enum UserRole {
  USER
  ADMIN
}

enum MembershipRole {
  ADMIN
  TREASURER
  SECRETARY
  MEMBER
}

enum ContributionStatus {
  PENDING
  PAID
  OVERDUE
}

enum LoanStatus {
  PENDING
  APPROVED
  REJECTED
  ACTIVE
  PAID
  DEFAULTED
}

enum TransactionType {
  CONTRIBUTION
  LOAN_DISBURSEMENT
  LOAN_REPAYMENT
  EXPENSE
  OTHER
}

enum NotificationType {
  MEETING_REMINDER
  CONTRIBUTION_DUE
  LOAN_APPROVED
  GENERAL
}

enum AuditAction {
  USER_UPDATE
  USER_DELETE
  USER_INVITE
  CHAMA_UPDATE
  CHAMA_DELETE
  CHAMA_MEMBER_ADD
  CHAMA_MEMBER_REMOVE
  CHAMA_MEMBER_ROLE_UPDATE
}

enum MeetingStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}
